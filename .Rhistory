number > 2 ~ as.character(ports))) %>%
group_by(ports_name) %>%
summarise(number = sum(number))
ports_n <- ports_n %>%
group_by(number) %>%
mutate(ports_name = case_when(
number <= 2 ~ "others",
number > 2 ~ as.character(ports))) %>%
group_by(ports_name) %>%
summarise(n_count = sum(number))
ports <- c("Nantes", "Bordeaux", "Liverpool", "Bayonne", "Brest", "Bristol")
number <- c(47, 78, 45, 1, 1, 2)
ports_n <- data.frame(ports, number)
# Then you may decide to realize the same think with case_when
ports_n <- ports_n %>%
group_by(number) %>%
mutate(ports_name = case_when(
number <= 2 ~ "others",
number > 2 ~ as.character(ports))) %>%
group_by(ports_name) %>%
summarise(n_count = sum(number))
ports_n
ports_n <- ports_n %>%
mutate(ports_name = case_when(
number <= 2 ~ "others",
number > 2 ~ as.character(ports))) %>%
group_by(ports_name) %>%
summarise(n_count = sum(number))
# Caricamento pacchetti ------------------------------------------------------------
pacchetti <- c("tidyverse","broom","openxlsx","readxl","magrittr","tidytext","summarytools","fs","lubridate",
"ggthemes")
lapply(pacchetti, FUN = function(X) {
do.call("require", list(X))
})
options(scipen = 999)
# Individuazione wd e creazione cartelle di lavoro -------------------------------------------------------
mydir <- getwd()
# vettore stringa cartelle
nested_dir <- c("dati","immagini","grafici","tabelle")
cartelle <- dir_create(path(mydir, nested_dir))
# Caricamento file csv ---------------------------------------------------
# url delle pagine della protezione civile con i dati provinciali e regionali
url_prot_civ_province <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv"
url_prot_civ_regioni <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
url_prot_civ_italia <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv"
# lettura file in formato .csv
dati_province <- read_csv(file = url_prot_civ_province)
dati_regioni <- read_csv(file = url_prot_civ_regioni)
dati_italia <- read_csv(file = url_prot_civ_italia)
# Calcolo degli incrementi percentuali giornalieri ------------------------
# Conteggio casi per provincia
dati_province_rec <- dati_province %>%
mutate(data = date(data)) %>%
group_by(codice_provincia) %>%
mutate(casi_giorno_prima = lag(totale_casi, n = 1, order_by = data),
nuovi_casi = (totale_casi - casi_giorno_prima),
incremento_giornaliero = round(((totale_casi - casi_giorno_prima)/totale_casi*100), digit = 1))
names(dati_province_rec)
# salvataggio dati province
write.xlsx(dati_province_rec, file = paste(cartelle[4],"dati_province.xlsx",sep = "/"))
# Conteggio casi per regione
variabili_interesse <- names(dati_regioni[7:15])
dati_regioni_rec <- dati_regioni %>%
mutate(data = date(data)) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(giorno_prima = ~lag(., n = 1, order_by = data))) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(del_giorno = ~(. - lag(., n = 1, order_by = data)))) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(variazione_giornaliera = ~(round(((. - lag(., n = 1, order_by = data))/.*100), digit = 1))))
names(dati_regioni_rec)
# salvataggio dati regioni
write.xlsx(dati_regioni_rec, file = paste(cartelle[4],"dati_regioni.xlsx",sep = "/"))
# Conteggio casi Italia
dati_italia_rec <- dati_italia %>%
mutate(data = date(data))
names(dati_italia_rec)
# Grafici -----------------------------------------------------------------
dati_filtrati <- dati_province_rec %>%
filter(codice_regione == "13") | codice_regione == "13")
ggplot(dati_filtrati, aes(x = data, y = totale_casi)) +
geom_line(aes(color = denominazione_provincia, linetype = denominazione_provincia)) +
scale_color_manual(values = c("darkred", "steelblue"))
dati_italia_rec <- dati_italia_rec %>%
select(data, ricoverati_con_sintomi:tamponi) %>%
gather(key = "variabile", value = "valore", -data)
ggplot(dati_italia_rec, aes(x = data, y = valore)) +
geom_line(aes(color = variabile)) +
#scale_color_manual(values = c("darkred", "steelblue")) +
theme_bw()
ARTIFICIALDATA<-dput(structure(list(week = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
45, 46, 47, 48, 49, 50, 51, 52), `2019 Series_1` = c(534.771929824561,
350.385964912281, 644.736842105263, 366.561403508772, 455.649122807018,
533.614035087719, 829.964912280702, 466.035087719298, 304.421052631579,
549.473684210526, 649.719298245614, 537.964912280702, 484.982456140351,
785.929824561404, 576.736842105263, 685.508771929824, 514.842105263158,
464.491228070175, 608.245614035088, 756.701754385965, 431.859649122807,
524.315789473684, 739.40350877193, 604.736842105263, 669.684210526316,
570.491228070175, 641.649122807018, 649.298245614035, 664.210526315789,
530.385964912281, 754.315789473684, 646.80701754386, 764.070175438596,
421.333333333333, 470.842105263158, 774.245614035088, 752.842105263158,
575.368421052632, 538.315789473684, 735.578947368421, 522, 862.561403508772,
496.526315789474, 710.631578947368, 584.456140350877, 843.19298245614,
563.473684210526, 568.456140350877, 625.368421052632, 768.912280701754,
679.824561403509, 642.526315789474), `2020 Series_1` = c(294.350877192983,
239.824561403509, 709.614035087719, 569.824561403509, 489.438596491228,
561.964912280702, 808.456140350877, 545.157894736842, 589.649122807018,
500.877192982456, 584.421052631579, 524.771929824561, 367.438596491228,
275.228070175439, 166.736842105263, 58.2456140350878, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA)), row.names = c(NA, -52L), class = c("tbl_df", "tbl",
"data.frame")))
View(ARTIFICIALDATA)
library(tidyverse)
View(ARTIFICIALDATA)
ARTIFICIALDATA_rec <- ARTIFICIALDATA %>%
gather(key = Year_indicator, value = time_series_value)
View(ARTIFICIALDATA_rec)
ARTIFICIALDATA_rec <- ARTIFICIALDATA %>%
gather(key = Year_indicator, value = time_series_value, -1)
View(ARTIFICIALDATA_rec)
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
xlim(1, 52)
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
xlim(1, 54)
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(limits = c(1,52))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(breaks = seq(0, week, 2), limits = c(c(0, week)))
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(breaks = seq(0, week, 52), limits = c(c(0, week)))
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(breaks = seq(0, .$week, 52), limits = c(c(0, .$week)))
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,54,2))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2))
your_plot
library(tidyverse)
library(ggplot2)
ARTIFICIALDATA_rec <- ARTIFICIALDATA %>%
gather(key = Year_indicator, value = time_series_value, -1)
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2))
ARTIFICIALDATA<-dput(structure(list(week = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
45, 46, 47, 48, 49, 50, 51, 52), `2019 Series_1` = c(534.771929824561,
350.385964912281, 644.736842105263, 366.561403508772, 455.649122807018,
533.614035087719, 829.964912280702, 466.035087719298, 304.421052631579,
549.473684210526, 649.719298245614, 537.964912280702, 484.982456140351,
785.929824561404, 576.736842105263, 685.508771929824, 514.842105263158,
464.491228070175, 608.245614035088, 756.701754385965, 431.859649122807,
524.315789473684, 739.40350877193, 604.736842105263, 669.684210526316,
570.491228070175, 641.649122807018, 649.298245614035, 664.210526315789,
530.385964912281, 754.315789473684, 646.80701754386, 764.070175438596,
421.333333333333, 470.842105263158, 774.245614035088, 752.842105263158,
575.368421052632, 538.315789473684, 735.578947368421, 522, 862.561403508772,
496.526315789474, 710.631578947368, 584.456140350877, 843.19298245614,
563.473684210526, 568.456140350877, 625.368421052632, 768.912280701754,
679.824561403509, 642.526315789474), `2020 Series_1` = c(294.350877192983,
239.824561403509, 709.614035087719, 569.824561403509, 489.438596491228,
561.964912280702, 808.456140350877, 545.157894736842, 589.649122807018,
500.877192982456, 584.421052631579, 524.771929824561, 367.438596491228,
275.228070175439, 166.736842105263, 58.2456140350878, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA)), row.names = c(NA, -52L), class = c("tbl_df", "tbl",
"data.frame")))
library(tidyverse)
ARTIFICIALDATA_rec <- ARTIFICIALDATA %>%
gather(key = Year_indicator, value = time_series_value, -1)
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator),size=1 linetype=2) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator),size=1 linetype=2)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2))
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(color = Year_indicator)) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2))
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(linetype="solid",  geom_line(aes(linetype=Year_indicator, color=Year_indicator, size=Year_indicator))+
scale_linetype_manual(values=c("solid", "dashed"))+
scale_color_manual(values=c('red','green'))+
scale_size_manual(values=c(2, 1))+
theme(legend.position="top") color="red", size=2)
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(linetype="solid",  geom_line(aes(linetype=Year_indicator, color=Year_indicator, size=Year_indicator)) +
scale_linetype_manual(values=c("solid", "dashed")) +
scale_color_manual(values=c('red','green')) +
scale_size_manual(values=c(2, 1))
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(linetype="solid",  geom_line(aes(linetype=Year_indicator, color=Year_indicator, size=Year_indicator)) +
scale_linetype_manual(values=c("solid", "dashed")) +
scale_color_manual(values=c('red','green')) +
scale_size_manual(values=c(2, 1)) +
theme_bw()
View(ARTIFICIALDATA_rec)
ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(linetype="solid",  geom_line(aes(linetype = Year_indicator, color = Year_indicator, size = Year_indicator)) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c('red','green')) +
scale_size_manual(values = c(2,1)) +
theme_bw()
?
)
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(linetype="solid",  geom_line(aes(linetype = Year_indicator, color = Year_indicator, size = Year_indicator))) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c('red','green')) +
scale_size_manual(values = c(2,1)) +
theme_bw()
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(linetype = Year_indicator, color = Year_indicator, size = Year_indicator)) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c('red','green')) +
scale_size_manual(values = c(2,1)) +
theme_bw()
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(linetype = Year_indicator, color = Year_indicator, size = Year_indicator)) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c('red','green')) +
scale_size_manual(values = c(1,1)) +
theme_bw()
your_plot
your_plot <- ggplot(data = ARTIFICIALDATA_rec, aes(x = week, y = time_series_value, group = Year_indicator)) +
geom_line(aes(linetype = Year_indicator, color = Year_indicator, size = Year_indicator)) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_x_continuous(name = "Week of the year", limits=c(0, 52), breaks=seq(0,52,2)) +
scale_color_manual(values = c('red','green')) +
scale_size_manual(values = c(1,1)) +
theme_bw()
your_plot
res.best.logistic <-
bestglm(Xy = winedata,
family = binomial,          # binomial family for logistic
IC = "AIC",                 # Information criteria
method = "exhaustive")
library(ggsignif)
library(ggplot2)
ggplot(df, aes(x = activity, y = mean, fill = group)) +
geom_bar(position = position_dodge(0.9), stat = "identity",
width = 0.9, colour = "black", size = 0.1) +
xlab("Activity") + ylab("Mean")+
geom_signif(y_position = c(60,50), xmin = c(0.7,2), xmax = c(1,2.3),
annotation=c("**", "***"), tip_length=0)
df <- data.frame(activity = rep(c("Flying", "Jumping"), 3),
mean = rep(rnorm(6, 50, 25)),
group = c(rep("Ecuador", 2),
rep("Peru", 2),
rep("Brazil", 2)))
ggplot(df, aes(x = activity, y = mean, fill = group)) +
geom_bar(position = position_dodge(0.9), stat = "identity",
width = 0.9, colour = "black", size = 0.1) +
xlab("Activity") + ylab("Mean")+
geom_signif(y_position = c(60,50), xmin = c(0.7,2), xmax = c(1,2.3),
annotation=c("**", "***"), tip_length=0)
library(ggplot2)
Year <- c(2019,2018,2017,2016,2015)
googlerev <- c(161857,136819,110855,90272,74989)
ibmrev <- c(77147,79591,79139,79919,81741)
df <- data.frame(Year, googlerev, ibmrev)
library(tidyverse)
Year <- c(2019,2018,2017,2016,2015)
googlerev <- c(161857,136819,110855,90272,74989)
ibmrev <- c(77147,79591,79139,79919,81741)
df <- data.frame(Year, googlerev, ibmrev)
df2 <- df %>%
gather(key = Year, value = Revenues,-1)
View(df2)
df2 <- df %>%
gather(key = Year, value = Revenues)
View(df2)
df2 <- df %>%
gather(key = Year, value = Revenues)
View(df2)
View(df)
View(df2)
df2 <- df %>%
gather(key = Year, value = Revenues)
Year <- c(2019,2018,2017,2016,2015)
googlerev <- c(161857,136819,110855,90272,74989)
ibmrev <- c(77147,79591,79139,79919,81741)
df <- data.frame(Year, googlerev, ibmrev)
df2 <- df %>%
gather(key = Year, value = Revenues)
df2 <- df %>%
pivot_longer(cols = -Year, names_to = "company", values_to = "revenue")
View(df2)
df3 <- df %>%
gather(key = "Year", value = "Revenue",-Year)
?gather
View(df)
df3 <- df %>%
gather(key = "Year", value = "Revenue",2:3)
View(df3)
df3 <- df %>%
gather(key = "Year", value = "Revenue")
View(df3)
View(df3)
df3 <- df %>%
gather(key = "Company", value = "Revenue")
df3 <- df %>%
gather(key = "Company", value = "Revenue", -Year)
View(df3)
getwd()
install.packages("qrencoder",dependencies = TRUE)
library(qrencoder)
qrencode_png(paste(getwd(),"fuggite.png",sep = "/"))
prova <- qrencode_png(paste(getwd(),"fuggite.png",sep = "/"))
plot(prova)
install.packages(qrcode)
install.packages("qrcode",dependencies = TRUE)
install.packages("qrcode",dependencies = TRUE)
library(qrencoder)
library(raster)
old_mar <- par()$mar
par(mar=c(0,0,0,0))
image(qrencode_raster("http://rud.is/b"), asp=1, col=c("white", "black"),
axes=FALSE, xlab="", ylab="")
par(mar=old_mar)
cat(qrencode_png("http://rud.is/b"))
library(BurStMisc)
scriptSearch("QR", "C:/Users/Scippy/hubiC", suffix="\\.R$")
scriptSearch("QR", "C:/Users", suffix="\\.R$")
library(qrencoder)
library(raster)
old_mar <- par()$mar
par(mar=c(0,0,0,0))
image(qrencode_raster("https://tenor.com/view/aiuto-lunedi-aldo-giovanni-giacomo-gif-7721200"), asp=1, col=c("white", "black"),
axes=FALSE, xlab="", ylab="")
par(mar=old_mar)
library(qrencoder)
library(raster)
old_mar <- par()$mar
par(mar=c(0,0,0,0))
image(qrencode_raster("https://scontent.ccdn.cloud/image/nospoiler/7c3f6a16-32dd-44ac-88f2-95e79711f0ec/cosi-e-la-vita-frasi-copertina-maxw-1152.jpg"), asp=1, col=c("white", "black"),
axes=FALSE, xlab="", ylab="")
par(mar=old_mar)
# Caricamento pacchetti ------------------------------------------------------------
pacchetti <- c("tidyverse","broom","openxlsx","readxl","magrittr","tidytext","summarytools","fs","lubridate",
"ggthemes")
lapply(pacchetti, FUN = function(X) {
do.call("require", list(X))
})
options(scipen = 999)
# Individuazione wd e creazione cartelle di lavoro -------------------------------------------------------
mydir <- getwd()
# vettore stringa cartelle
nested_dir <- c("dati","immagini","grafici","tabelle")
cartelle <- dir_create(path(mydir, nested_dir))
# Caricamento file csv ---------------------------------------------------
# url delle pagine della protezione civile con i dati provinciali e regionali
url_prot_civ_province <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv"
url_prot_civ_regioni <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
url_prot_civ_italia <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv"
# lettura file in formato .csv
dati_province <- read_csv(file = url_prot_civ_province)
dati_regioni <- read_csv(file = url_prot_civ_regioni)
dati_italia <- read_csv(file = url_prot_civ_italia)
save(dati_province, file = paste(cartelle[1],paste(paste("dati_province",Sys.Date(),sep = "_"),"Rda", sep = "."),sep = "/"))
save(dati_regioni, file = paste(cartelle[1],paste(paste("dati_regioni",Sys.Date(),sep = "_"),"Rda", sep = "."),sep = "/"))
save(dati_italia, file = paste(cartelle[1],paste(paste("dati_italia",Sys.Date(),sep = "_"),"Rda", sep = "."),sep = "/"))
# Caricamento pacchetti ------------------------------------------------------------
pacchetti <- c("tidyverse","broom","openxlsx","readxl","magrittr","tidytext","summarytools","fs","lubridate",
"ggthemes")
lapply(pacchetti, FUN = function(X) {
do.call("require", list(X))
})
options(scipen = 999)
# Individuazione wd e creazione cartelle di lavoro -------------------------------------------------------
mydir <- getwd()
# vettore stringa cartelle
nested_dir <- c("dati","immagini","grafici","tabelle")
cartelle <- dir_create(path(mydir, nested_dir))
# Caricamento file csv ---------------------------------------------------
# url delle pagine della protezione civile con i dati provinciali e regionali
url_prot_civ_regioni <- "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
files_rda <- list.files(path = cartelle,pattern = "*.Rda")
# lettura file in formato .csv
load(file = paste(cartelle[1],files_rda[6],sep = "/"))
# Creazione variabili per Regione ------------------------
# Conteggio casi per regione
variabili_interesse <- names(dati_regioni[7:15])
dati_regioni_rec <- dati_regioni %>%
mutate(data = date(data)) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(giorno_prima = ~lag(., n = 1, order_by = data))) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(del_giorno = ~(. - lag(., n = 1, order_by = data)))) %>%
group_by(codice_regione) %>%
mutate_at(vars(all_of(variabili_interesse)), list(variazione_giornaliera = ~(round(((. - lag(., n = 1, order_by = data))/.*100), digit = 1))))
names(dati_regioni_rec)
# Grafici -----------------------------------------------------------------
names(dati_regioni_rec)
dati_filtrati <- dati_regioni_rec %>%
filter(codice_regione == "18" | codice_regione == "19"| codice_regione == "13" | codice_regione == "12" | codice_regione == "16" | codice_regione == "10") %>%
#filter(codice_regione == "03" | codice_regione == "05"| codice_regione == "08") %>%
select(-(note_it:note_en))
# riduzione e trasformazione del data set
names(dati_filtrati)
dati_filtrati_rec <- dati_filtrati %>%
pivot_longer(
cols = ricoverati_con_sintomi:deceduti_variazione_giornaliera,
names_to = "indicatore",
values_to = "valore")
names(dati_filtrati)
ggplot(dati_filtrati, aes(x = data, y = deceduti)) +
geom_line(aes(color = denominazione_regione),size = 1.3) +
#???scale_color_manual(values = c("#FE2712", "#FCC200", "#009966")) +
scale_color_manual(values = c("#FE2712", "#FCC200", "#009966", "#318CE7", "#4B0082", "#00FF00")) +
#scale_color_manual(values = c("#FE2712", "#009966")) +
scale_x_date(name = "giorno", breaks = "2 days", date_labels = "%b-%d", expand = c(0,0)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
names(dati_filtrati)
ggplot(dati_filtrati, aes(x = data, y = totale_ospedalizzati)) +
geom_line(aes(color = denominazione_regione),size = 1.3) +
#???scale_color_manual(values = c("#FE2712", "#FCC200", "#009966")) +
scale_color_manual(values = c("#FE2712", "#FCC200", "#009966", "#318CE7", "#4B0082", "#00FF00")) +
#scale_color_manual(values = c("#FE2712", "#009966")) +
scale_x_date(name = "giorno", breaks = "2 days", date_labels = "%b-%d", expand = c(0,0)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dati_filtrati, aes(x = data, y = terapia_intensiva)) +
geom_line(aes(color = denominazione_regione),size = 1.3) +
#???scale_color_manual(values = c("#FE2712", "#FCC200", "#009966")) +
scale_color_manual(values = c("#FE2712", "#FCC200", "#009966", "#318CE7", "#4B0082", "#00FF00")) +
#scale_color_manual(values = c("#FE2712", "#009966")) +
scale_x_date(name = "giorno", breaks = "2 days", date_labels = "%b-%d", expand = c(0,0)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
today()
today() - "2020-03-10"
today() - ymd("2020-03-10")
install.packages(c("colourvalues", "foreign", "RcppArmadillo", "systemfonts", "VGAM", "webutils", "xml2"))
install.packages(c("colourvalues", "foreign", "modelr", "RcppArmadillo", "recipes", "systemfonts", "VGAM", "webutils", "xml2"))
install.packages("colourvalues")
install.packages(c("colourvalues", "foreign", "RcppArmadillo", "systemfonts", "VGAM", "webutils", "xml2"))
install.packages(c("colourvalues", "foreign", "RcppArmadillo", "systemfonts", "VGAM", "webutils", "xml2"))
install.packages("RcppArmadillo")
library(rvest)
library(dplyr)
library(stringr)
list <- "https://towardsdatascience.com/springer-has-released-65-machine-learning-and-data-books-for-free-961f8181f189"
aux <- read_html(list) %>%
html_node("div") %>%
html_text() %>%
str_split("http://link.springer.com/openurl\\?genre=book&isbn=")
ids <- substr(unlist(aux), 1, 17)[-1]
sapply(ids, function(x) {
url <- paste0("https://link.springer.com/content/pdf/10.1007%2F", x, ".pdf")
download.file(url, paste0(x, ".pdf"), mode = "wb")
})
library(lubridate)
today()
today
today() - dmy("09-03-2020")
install.packages(c("bigrquery", "countrycode", "DiagrammeR", "logspline", "lumberjack", "MCMCpack", "polspline", "ps", "rgeos", "showtext", "sysfonts", "tufte", "VIM"))
library(lubridate)
today() - ymd("2020-03-10")
install.packages(c("broomExtra", "concaveman", "diffobj", "miceadds", "mlt", "RODBC", "rsvg", "scales", "spatstat", "tidygraph", "tidyselect", "vctrs"))
library(lubridate)
today
today() - ymd("20200520")
today() - ymd("20200310")
install.packages(c("backports", "bigrquery", "bookdown", "broom.mixed", "effectsize", "ellipsis", "flextable", "fuzzyjoin", "gender", "glmnet", "glue", "gmp", "gss", "gstat", "gWidgetsRGtk2", "insight", "jmvcore", "jomo", "lavaan", "mapdeck", "maptools", "mice", "modelr", "mosaic", "mosaicData", "officer", "parameters", "polspline", "RcppArmadillo", "RhpcBLASctl", "rsvg", "sfheaders", "shinyWidgets", "systemfonts", "tinytest", "tinytex", "tram", "xfun"))
install.packages("gWidgetsRGtk2")
install.packages(c("gWidgetsRGtk2", "sp"))
install.packages(c("gWidgetsRGtk2", "tidyr"))
install.packages(c("ggplot2", "tinytex"))
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_261')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_261')
install.packages("mlr", dependencies = TRUE)
install.packages("rJava", dependencies = TRUE)
install.packages("mlr", dependencies = TRUE)
getwd()
list.dirs(.)
list.files(getwd())
setwd("C:\Users\Scippy\Desktop\WDRStudio\CourseraDST")
setwd("C:/Users/Scippy/Desktop/WDRStudio/CourseraDST")
setwd("C:\Users\Scippy\Desktop\WDRStudio\CourseraDST")
getwd()
list.files()
getwd()
